{"version":3,"sources":["app/event/Event.ts","app/components/header/Header.tsx","app/tools/Tools.ts","app/components/config/Config.ts","app/components/addServer/AddServer.tsx","app/components/keyTree/KeyTree.tsx","app/ws/WebSocket.ts","app/components/panel/Panel.tsx","app/components/serverList/ServerList.tsx","app/pages/index/Index.tsx","app/pages/login/Login.tsx","app/pages/command/Command.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["events","name","e","this","args","Header","className","type","onClick","addServer","danger","ghost","serverList","AlignLeftOutlined","Event","emit","Component","data","s","key","slice","begin","end","res","index","push","JSON","parse","localStorage","getItem","config","cfg","setItem","stringify","removeItem","AddServer","state","visible","radio","event","host","port","password","master","setState","add","onOpen","remove","title","placement","closable","onClose","getContainer","width","Group","value","onChange","target","Button","placeholder","submit","test","Axios","post","Tools","QueryString","response","code","notification","error","message","status","description","msg","success","Config","get","set","Option","KeyTree","select","connect","disconnect","update","createSelect","console","log","default","height","x","y","minWidth","maxWidth","bounds","enableResizing","right","disableDragging","defaultValue","style","listHeight","onSelect","selectDB","Range","map","v","ws","isStart","Socket","onError","err","start","close","addListener","Panel","date","WebSocket","listen","ServerList","all","createHeader","Index","Login","Command","App","props","unlisten","location","hash","window","history","createBrowserHistory","change","action","path","component","exact","from","to","Boolean","hostname","match","defaults","headers","baseURL","timeout","interceptors","use","maxCount","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.684dab21.chunk.js","sourcesContent":["class Event {\n\tevents: { [key: string]: (...args: any[]) => void } = {};\n\n\tadd(name: string, e: (...args: any[]) => void): string {\n\t\tthis.events[name] = e;\n\t\treturn name;\n\t}\n\n\tremove(name: string) {\n\t\tdelete this.events[name];\n\t}\n\n\temit(name: string, ...args: any[]) {\n\t\tthis.events[name](...args);\n\t}\n}\n\nexport default new Event();\n","import React, { Component } from \"react\";\nimport { Button } from \"antd\";\nimport \"./header.scss\";\nimport Event from \"../../event/Event\";\nimport { AlignLeftOutlined } from \"@ant-design/icons\";\n\nexport default class Header extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"header\">\n\t\t\t\t<div className=\"left\">\n\t\t\t\t\t<Button type=\"primary\" onClick={() => this.addServer()}>\n\t\t\t\t\t\t添加\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"right\">\n\t\t\t\t\t<Button type=\"dashed\" danger ghost onClick={() => this.serverList()}>\n\t\t\t\t\t\t<AlignLeftOutlined />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\tserverList(): void {\n\t\tEvent.emit(\"serverList\");\n\t}\n\taddServer(): void {\n\t\tEvent.emit(\"addServer\");\n\t}\n}\n","class Tools {\n\tQueryString(data: { [key: string]: string }) {\n\t\tlet s = \"\";\n\t\tfor (const key in data) {\n\t\t\ts += `${key}=${data[key]}&`;\n\t\t}\n\t\treturn s.slice(0, -1);\n\t}\n\n\tRange(begin: number, end: number): number[] {\n\t\tlet res = [];\n\t\tfor (let index = begin; index < end; index++) {\n\t\t\tres.push(index);\n\t\t}\n\t\treturn res;\n\t}\n}\n\nexport default new Tools();\n","interface config {\n\thost: string;\n\tport: string;\n\tpassword: string;\n\tname: string;\n\tmaster: string;\n}\n\nclass Config {\n\tall() {\n\t\treturn JSON.parse(localStorage.getItem(\"config\") || \"{}\");\n\t}\n\n\tget(name: string): config {\n\t\tlet cfg = JSON.parse(localStorage.getItem(\"config\") || \"{}\");\n\t\treturn cfg[name];\n\t}\n\n\tset(name: string, config: config) {\n\t\tlet cfg = JSON.parse(localStorage.getItem(\"config\") || \"{}\");\n\t\tcfg[name] = config;\n\t\tlocalStorage.setItem(\"config\", JSON.stringify(cfg));\n\t}\n\n\tdelete(name: string) {\n\t\tlet cfg = JSON.parse(localStorage.getItem(\"config\") || \"{}\");\n\t\tdelete cfg[name];\n\t\tlocalStorage.setItem(\"config\", JSON.stringify(cfg));\n\t}\n\n\tclear() {\n\t\tlocalStorage.removeItem(\"config\");\n\t}\n}\n\nexport default new Config();\n","import React, { Component } from \"react\";\nimport { Drawer, Radio, Input, Button, notification } from \"antd\";\nimport Event from \"../../event/Event\";\nimport \"./addServer.scss\";\nimport Axios from \"axios\";\nimport Tools from \"../../tools/Tools\";\nimport Config from \"../config/Config\";\n\nexport default class AddServer extends Component {\n\tstate = { visible: false, radio: \"normal\" };\n\tevent!: string;\n\n\tonClose() {\n\t\tthis.setState({ visible: false });\n\t}\n\n\tonOpen() {\n\t\tthis.setState({ visible: true });\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.event = Event.add(\"addServer\", () => {\n\t\t\tthis.onOpen();\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tEvent.remove(this.event);\n\t}\n\n\tname = \"127.0.0.1\";\n\thost = \"127.0.0.1\";\n\tport = \"6379\";\n\tpassword = \"1354243\";\n\tmaster = \"master\";\n\n\trender() {\n\t\treturn (\n\t\t\t<Drawer\n\t\t\t\ttitle=\"add server\"\n\t\t\t\tplacement=\"right\"\n\t\t\t\tclosable={false}\n\t\t\t\tonClose={() => this.onClose()}\n\t\t\t\tvisible={this.state.visible}\n\t\t\t\tgetContainer={false}\n\t\t\t\twidth={\"30%\"}\n\t\t\t\tclassName=\"add-server\"\n\t\t\t>\n\t\t\t\t<Radio.Group value={this.state.radio} onChange={value => this.setState({ radio: value.target.value })}>\n\t\t\t\t\t<Radio.Button value=\"normal\">Default</Radio.Button>\n\t\t\t\t\t<Radio.Button value=\"cluster\">Cluster</Radio.Button>\n\t\t\t\t</Radio.Group>\n\t\t\t\t<div className=\"normal-form\">\n\t\t\t\t\t<Input placeholder=\"name\" onChange={value => (this.name = value.target.value)} />\n\t\t\t\t\t<Input placeholder=\"host\" onChange={value => (this.host = value.target.value)} />\n\t\t\t\t\t<Input placeholder=\"port\" onChange={value => (this.port = value.target.value)} />\n\t\t\t\t\t<Input placeholder=\"password\" onChange={value => (this.password = value.target.value)} />\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button type=\"primary\" onClick={() => this.submit()}>\n\t\t\t\t\t\t\t创建\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"primary\" onClick={() => this.test()}>\n\t\t\t\t\t\t\t测试\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Drawer>\n\t\t);\n\t}\n\n\tasync test() {\n\t\tvar data = {\n\t\t\tname: this.name,\n\t\t\thost: this.host,\n\t\t\tport: this.port,\n\t\t\tpassword: this.password,\n\t\t\tmaster: this.master\n\t\t};\n\n\t\tlet response = await Axios.post(`/redis/register/${this.state.radio}`, Tools.QueryString(data));\n\n\t\tif (response.data.code !== 200) {\n\t\t\treturn notification.error({ message: response.data.status, description: response.data.msg });\n\t\t}\n\n\t\treturn notification.success({ message: response.data.status, description: \"连接成功\" });\n\t}\n\n\tasync submit() {\n\t\tvar data = {\n\t\t\tname: this.name,\n\t\t\thost: this.host,\n\t\t\tport: this.port,\n\t\t\tpassword: this.password,\n\t\t\tmaster: this.master\n\t\t};\n\n\t\tlet cfg = Config.get(this.name);\n\t\tif (cfg) return notification.error({ message: \"ERROR\", description: `${this.name} 已经存在!` });\n\n\t\tConfig.set(this.name, data);\n\n\t\treturn notification.success({ message: \"SUCCESS\", description: \"创建成功\" });\n\t}\n}\n","import React, { Component } from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport \"./keyTree.scss\";\nimport { Tree, Select, Button } from \"antd\";\nimport Tools from \"../../tools/Tools\";\nimport Event from \"../../event/Event\";\n\nconst Option = Select.Option;\n\nexport default class KeyTree extends Component {\n\tstate = {\n\t\tdata: [{ title: \"hello\", key: \"world\" }],\n\t\tselect: null\n\t};\n\n\tcomponentDidMount() {\n\t\tEvent.add(\"connect\", key => this.connect(key));\n\t\tEvent.add(\"disconnect\", key => this.disconnect(key));\n\t\tEvent.add(\"update\", key => this.update(key));\n\t}\n\n\tcomponentWillUnmount() {\n\t\tEvent.remove(\"connect\");\n\t\tEvent.remove(\"disconnect\");\n\t\tEvent.remove(\"update\");\n\t}\n\n\tconnect(key: any) {\n\t\tthis.setState({ select: this.createSelect(key) });\n\t}\n\n\tdisconnect(key: any) {\n\t\tthis.setState({ select: null });\n\t}\n\n\tupdate(key: any) {\n\t\tconsole.log(\"update\", key);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Rnd\n\t\t\t\tdefault={{ height: \"100%\", width: \"20%\", x: 0, y: 0 }}\n\t\t\t\tminWidth={\"20%\"}\n\t\t\t\tmaxWidth={\"40%\"}\n\t\t\t\tbounds=\".content\"\n\t\t\t\tenableResizing={{ right: true }}\n\t\t\t\tdisableDragging={true}\n\t\t\t\tclassName=\"key-tree\"\n\t\t\t>\n\t\t\t\t{this.state.select}\n\t\t\t\t{/* <Tree\n\t\t\t\t\tshowLine={true}\n\t\t\t\t\tshowIcon={false}\n\t\t\t\t\tblockNode={false}\n\t\t\t\t\tdefaultExpandedKeys={[\"0-0-0\"]}\n\t\t\t\t\tonSelect={value => this.onSelect(value)}\n\t\t\t\t\ttreeData={this.state.data}\n\t\t\t\t/> */}\n\t\t\t</Rnd>\n\t\t);\n\t}\n\n\tcreateSelect(key: any) {\n\t\treturn (\n\t\t\t<div className=\"select-panel\">\n\t\t\t\t<Select\n\t\t\t\t\tdefaultValue={\"请选择DB\"}\n\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\tlistHeight={600}\n\t\t\t\t\tonSelect={value => this.selectDB(value)}\n\t\t\t\t>\n\t\t\t\t\t{Tools.Range(0, 16).map(v => (\n\t\t\t\t\t\t<Option key={v} value={v}>\n\t\t\t\t\t\t\tdb({v})\n\t\t\t\t\t\t</Option>\n\t\t\t\t\t))}\n\t\t\t\t</Select>\n\t\t\t\t<Button type=\"link\" danger>\n\t\t\t\t\t{key}\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tselectDB(value: any): void {\n\t\tconsole.log(value);\n\t}\n}\n","import Socket from \"lows\";\n\nclass WebSocket {\n\tws: Socket;\n\tisStart = false;\n\n\tconstructor() {\n\t\tthis.ws = new Socket();\n\n\t\tthis.ws.config = {\n\t\t\thost: \"http://127.0.0.1\",\n\t\t\tport: \"12389\"\n\t\t};\n\n\t\tthis.ws.onOpen = () => {\n\t\t\tconsole.log(\"on open\");\n\t\t};\n\n\t\tthis.ws.onError = (err: any) => {\n\t\t\tconsole.log(\"on error\", err);\n\t\t};\n\n\t\tthis.ws.onClose = () => {\n\t\t\tconsole.log(\"on close\");\n\t\t};\n\t}\n\n\tstart() {\n\t\t!this.isStart && this.ws.start();\n\t\tthis.isStart = true;\n\t}\n\n\tclose() {\n\t\tthis.isStart && this.ws.close();\n\t\tthis.isStart = false;\n\t}\n\n\tlisten(...args: any[]) {\n\t\tthis.ws.addListener(...args);\n\t}\n}\n\nexport default new WebSocket();\n","import React, { Component } from \"react\";\nimport \"./panel.scss\";\nimport WebSocket from \"../../ws/WebSocket\";\n\nexport default class Panel extends Component {\n\tstate = { date: \"\" };\n\n\tcomponentDidMount() {\n\t\tWebSocket.listen(\"system-time\", (event: any, data: any) => {\n\t\t\tthis.setState({ date: data });\n\t\t});\n\t}\n\n\trender() {\n\t\treturn <div className=\"panel\">{this.state.date}</div>;\n\t}\n}\n","import React, { Component } from \"react\";\nimport { Drawer, Button } from \"antd\";\nimport Event from \"../../event/Event\";\nimport \"./serverList.scss\";\nimport Config from \"../config/Config\";\n\nexport default class ServerList extends Component {\n\tstate = { visible: false };\n\n\tonClose() {\n\t\tthis.setState({ visible: false });\n\t}\n\n\tonOpen() {\n\t\tthis.setState({ visible: true });\n\t}\n\n\tcomponentDidMount() {\n\t\tEvent.add(\"serverList\", () => this.onOpen());\n\t}\n\n\tcomponentWillUnmount() {\n\t\tEvent.remove(\"serverList\");\n\t}\n\n\tcreateHeader() {\n\t\tlet data = [];\n\t\tlet config = Config.all();\n\t\tfor (const key in config) {\n\t\t\tdata.push(\n\t\t\t\t<div className=\"db-header\" key={key}>\n\t\t\t\t\t<div>{key}</div>\n\t\t\t\t\t<div className=\"button\">\n\t\t\t\t\t\t<Button type=\"link\" onClick={() => Event.emit(\"connect\", key)}>\n\t\t\t\t\t\t\t连接\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"link\" onClick={() => Event.emit(\"update\", key)}>\n\t\t\t\t\t\t\t修改\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"link\" danger onClick={() => Event.emit(\"disconnect\", key)}>\n\t\t\t\t\t\t\t断开\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn data;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Drawer\n\t\t\t\ttitle=\"server list\"\n\t\t\t\tplacement=\"right\"\n\t\t\t\tclosable={false}\n\t\t\t\tonClose={() => this.onClose()}\n\t\t\t\tvisible={this.state.visible}\n\t\t\t\tgetContainer={false}\n\t\t\t\twidth={\"30%\"}\n\t\t\t\tclassName=\"server-list\"\n\t\t\t>\n\t\t\t\t{this.createHeader()}\n\t\t\t</Drawer>\n\t\t);\n\t}\n}\n","import React, { Component } from \"react\";\nimport \"./index.scss\";\nimport Header from \"../../components/header/Header\";\nimport AddServer from \"../../components/addServer/AddServer\";\nimport KeyTree from \"../../components/keyTree/KeyTree\";\nimport Panel from \"../../components/panel/Panel\";\nimport ServerList from \"../../components/serverList/ServerList\";\n\nclass Index extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"index\">\n\t\t\t\t<AddServer></AddServer>\n\t\t\t\t<ServerList></ServerList>\n\t\t\t\t<Header></Header>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<KeyTree></KeyTree>\n\t\t\t\t\t<Panel></Panel>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Index;\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport \"./login.scss\";\n\nfunction Login() {\n\treturn (\n\t\t<div className=\"login\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<Button type=\"default\">Button</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Login;\n","import React from \"react\";\n\nfunction Command() {\n\treturn <div>hello command</div>;\n}\n\nexport default Command;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport { createBrowserHistory, History, UnregisterCallback, Location } from \"history\";\nimport \"./App.scss\";\nimport Index from \"./pages/index/Index\";\nimport Login from \"./pages/login/Login\";\nimport Command from \"./pages/command/Command\";\nimport WebSocket from \"./ws/WebSocket\";\n\nexport default class App extends Component {\n\tunlisten!: UnregisterCallback;\n\n\tchange(location: Location<History.PoorMansUnknown>) {\n\t\tif (false) return (window.location.hash = \"/login\");\n\t\tif (location.hash === \"#/login\") return (window.location.hash = \"/index\");\n\t}\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tWebSocket.start();\n\t}\n\n\tcomponentDidMount() {\n\t\tconst history = createBrowserHistory();\n\t\t// Get the current location.\n\t\tconst location = history.location;\n\n\t\tthis.change(location);\n\n\t\t// Listen for changes to the current location.\n\t\tthis.unlisten = history.listen((location, action) => {\n\t\t\t// location is an object like window.location\n\t\t\tthis.change(location);\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tWebSocket.close();\n\t\tthis.unlisten();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<HashRouter>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/index\" component={Index} />\n\t\t\t\t\t<Route path=\"/command\" component={Command} />\n\t\t\t\t\t<Route path=\"/login\" component={Login} exact />\n\t\t\t\t\t<Redirect from=\"**\" to=\"/index\" />\n\t\t\t\t</Switch>\n\t\t\t</HashRouter>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Axios from \"axios\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { message, notification } from \"antd\";\n\nAxios.defaults.headers.post[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n\nAxios.defaults.baseURL = \"http://127.0.0.1:12388\";\n\nAxios.defaults.timeout = 5000;\n\nAxios.interceptors.response.use(response => {\n\treturn response;\n});\n\nmessage.config({ maxCount: 3 });\n\nnotification.config({});\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}