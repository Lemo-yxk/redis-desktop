{"version":3,"sources":["app/event/Event.ts","app/ws/WebSocket.ts","app/components/header/Header.tsx","app/components/config/Config.ts","app/tools/Tools.ts","app/services/Command.ts","app/components/addServer/AddServer.tsx","app/components/keyTree/KeyTree.tsx","app/transform/Transform.ts","app/components/panel/data/String.tsx","app/components/panel/data/List.tsx","app/components/panel/Panel.tsx","app/components/serverList/ServerList.tsx","app/components/updateServer/UpdateServer.tsx","app/pages/index/Index.tsx","app/pages/login/Login.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["events","name","e","this","args","ws","isStart","Socket","config","host","port","onOpen","console","log","onError","err","onClose","start","close","addListener","Header","state","date","WebSocket","listen","event","data","setState","className","type","onClick","Event","emit","danger","ghost","AlignLeftOutlined","Component","JSON","parse","localStorage","getItem","cfg","setItem","stringify","removeItem","s","key","slice","begin","end","res","index","push","response","success","error","isAxiosError","toJSON","notification","message","destroy","msg","code","Axios","post","Tools","QueryString","serverName","db","join","Notification","AddServer","visible","clusterHostInput","password","master","cluster","Array","add","remove","title","placement","closable","getContainer","width","destroyOnClose","Group","value","onChange","target","Button","spellCheck","addonBefore","placeholder","addHost","submit","test","map","v","i","addonAfter","MinusCircleOutlined","removeHost","splice","createCluster","filter","Command","register","Config","get","description","set","Option","KeyTree","select","dataTree","databases","queue","style","tree","base","fontSize","whiteSpace","backgroundColor","height","padding","node","color","activeLink","prev","connect","disconnect","update","delete","deleteKey","insertKey","length","addDataTree","createDataTree","selectDB","login","createSelect","createTitle","arr","params","split","temp","inArr","item","id","Math","random","toString","children","default","x","y","minWidth","maxWidth","bounds","enableResizing","right","disableDragging","refresh","listHeight","onSelect","Range","parseInt","onToggle","toggled","animations","active","loading","content","duration","scan","Transform","String","List","Hash","Set","ZSet","Empty","do","check","insert","seconds","cmd","TextArea","rename","maskClosable","onOk","onCancel","closeRename","okText","cancelText","defaultValue","toUpperCase","openRename","Panel","component","ServerList","modal","header","createHeader","all","onChooseOpen","confirm","onChooseClose","footer","choose","UpdateServer","props","Index","Login","App","unlisten","location","hash","window","history","createBrowserHistory","change","action","path","exact","from","to","Boolean","hostname","match","defaults","headers","baseURL","timeout","interceptors","use","maxCount","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7ea4cec6.chunk.js","sourcesContent":["class Event {\n\tevents: { [key: string]: (...args: any[]) => void } = {};\n\n\tadd(name: string, e: (...args: any[]) => void): string {\n\t\tthis.events[name] = e;\n\t\treturn name;\n\t}\n\n\tremove(name: string) {\n\t\tdelete this.events[name];\n\t}\n\n\temit(name: string, ...args: any[]) {\n\t\tthis.events[name] && this.events[name](...args);\n\t}\n}\n\nexport default new Event();\n","import Socket from \"lows\";\n\nclass WebSocket {\n\tws: Socket;\n\tisStart = false;\n\n\tconstructor() {\n\t\tthis.ws = new Socket();\n\n\t\tthis.ws.config = {\n\t\t\thost: \"http://127.0.0.1\",\n\t\t\tport: \"12389\"\n\t\t};\n\n\t\tthis.ws.onOpen = () => {\n\t\t\tconsole.log(\"on open\");\n\t\t};\n\n\t\tthis.ws.onError = (err: any) => {\n\t\t\tconsole.log(\"on error\", err);\n\t\t};\n\n\t\tthis.ws.onClose = () => {\n\t\t\tconsole.log(\"on close\");\n\t\t};\n\t}\n\n\tstart() {\n\t\t!this.isStart && this.ws.start();\n\t\tthis.isStart = true;\n\t}\n\n\tclose() {\n\t\tthis.isStart && this.ws.close();\n\t\tthis.isStart = false;\n\t}\n\n\tlisten(...args: any[]) {\n\t\tthis.ws.addListener(...args);\n\t}\n}\n\nexport default new WebSocket();\n","import React, { Component } from \"react\";\nimport { Button } from \"antd\";\nimport \"./header.scss\";\nimport Event from \"../../event/Event\";\nimport { AlignLeftOutlined } from \"@ant-design/icons\";\nimport WebSocket from \"../../ws/WebSocket\";\n\nexport default class Header extends Component {\n\tstate = { date: \"\" };\n\n\tcomponentDidMount() {\n\t\tWebSocket.listen(\"system-time\", (event: any, data: any) => {\n\t\t\tthis.setState({ date: data });\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"header\">\n\t\t\t\t<div className=\"left\">\n\t\t\t\t\t<Button type=\"primary\" onClick={() => Event.emit(\"openAddServer\")}>\n\t\t\t\t\t\t添加\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"right\">\n\t\t\t\t\t<Button type=\"link\" danger>\n\t\t\t\t\t\t{this.state.date}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button type=\"dashed\" danger ghost onClick={() => Event.emit(\"openServerList\")}>\n\t\t\t\t\t\t<AlignLeftOutlined />\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import { config } from \"../../interface/config\";\n\nclass Config {\n\tall() {\n\t\treturn JSON.parse(localStorage.getItem(\"config\") || \"{}\");\n\t}\n\n\tget(name: string): config {\n\t\tlet cfg = JSON.parse(localStorage.getItem(\"config\") || \"{}\");\n\t\treturn cfg[name];\n\t}\n\n\tset(name: string, config: config) {\n\t\tlet cfg = JSON.parse(localStorage.getItem(\"config\") || \"{}\");\n\t\tcfg[name] = config;\n\t\tlocalStorage.setItem(\"config\", JSON.stringify(cfg));\n\t}\n\n\tdelete(name: string) {\n\t\tlet cfg = JSON.parse(localStorage.getItem(\"config\") || \"{}\");\n\t\tdelete cfg[name];\n\t\tlocalStorage.setItem(\"config\", JSON.stringify(cfg));\n\t}\n\n\tclear() {\n\t\tlocalStorage.removeItem(\"config\");\n\t}\n}\n\nexport default new Config();\n","import { notification, message } from \"antd\";\nclass Tools {\n\tQueryString(data: { [key: string]: string }) {\n\t\tlet s = \"\";\n\t\tfor (const key in data) {\n\t\t\ts += `${key}=${data[key]}&`;\n\t\t}\n\t\treturn s.slice(0, -1);\n\t}\n\n\tRange(begin: number, end: number): number[] {\n\t\tlet res = [];\n\t\tfor (let index = begin; index < end; index++) {\n\t\t\tres.push(index);\n\t\t}\n\t\treturn res;\n\t}\n\n\tNotification(response: any, success?: any, error?: any) {\n\t\tif (response.isAxiosError) {\n\t\t\tlet error = response.toJSON();\n\t\t\tnotification.error({ message: error.message });\n\t\t\tmessage.destroy();\n\t\t\tthrow error;\n\t\t}\n\t\tsuccess = success || response.data.msg;\n\t\terror = error || response.data.msg;\n\t\tif (response.data.code === 200) {\n\t\t\tnotification.success({ message: success });\n\t\t} else {\n\t\t\tnotification.error({ message: error });\n\t\t}\n\t}\n}\n\nexport default new Tools();\n","import { config } from \"../interface/config\";\nimport Axios from \"axios\";\nimport Tools from \"../tools/Tools\";\n\nclass Command {\n\tasync register(type: string, config: config) {\n\t\treturn await Axios.post(`/redis/register/${type}`, Tools.QueryString(config as any));\n\t}\n\n\tasync selectDB(serverName: string, db: any) {\n\t\treturn await Axios.post(`/redis/db/select`, Tools.QueryString({ name: serverName, db }));\n\t}\n\n\tasync scan(serverName: string) {\n\t\tlet response = await Axios.post(`/redis/db/scan`, Tools.QueryString({ name: serverName }));\n\t\treturn response.data.msg;\n\t}\n\n\tasync type(serverName: string, key: string) {\n\t\tlet response = await Axios.post(`/redis/key/type`, Tools.QueryString({ name: serverName, key: key }));\n\t\treturn response.data.msg;\n\t}\n\n\tasync do(serverName: string, key: string, ...args: any[]) {\n\t\tlet response = await Axios.post(\n\t\t\t`/redis/key/do`,\n\t\t\tTools.QueryString({\n\t\t\t\tname: serverName,\n\t\t\t\tkey: key,\n\t\t\t\targs: args.join(\" \")\n\t\t\t})\n\t\t);\n\n\t\tif (response.data.code !== 200) {\n\t\t\treturn Tools.Notification(response);\n\t\t}\n\n\t\treturn response.data.msg;\n\t}\n}\n\nexport default new Command();\n","import React, { Component } from \"react\";\nimport { Drawer, Radio, Input, Button, notification } from \"antd\";\nimport Event from \"../../event/Event\";\nimport \"./addServer.scss\";\nimport Config from \"../config/Config\";\nimport Command from \"../../services/Command\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\nimport Tools from \"../../tools/Tools\";\n\nexport default class AddServer extends Component {\n\tstate = { visible: false, type: \"normal\", clusterHostInput: null };\n\tevent!: string;\n\n\tonClose() {\n\t\tthis.setState({ visible: false, clusterHostInput: null });\n\t}\n\n\tonOpen() {\n\t\tthis.setState({ visible: true });\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.event = Event.add(\"openAddServer\", () => this.onOpen());\n\t}\n\n\tcomponentWillUnmount() {\n\t\tEvent.remove(this.event);\n\t}\n\n\tname = \"\";\n\thost = \"\";\n\tport = \"\";\n\tpassword = \"\";\n\tmaster = \"\";\n\tcluster = new Array();\n\n\trender() {\n\t\treturn (\n\t\t\t<Drawer\n\t\t\t\ttitle=\"添加服务器\"\n\t\t\t\tplacement=\"right\"\n\t\t\t\tclosable={false}\n\t\t\t\tonClose={() => this.onClose()}\n\t\t\t\tvisible={this.state.visible}\n\t\t\t\tgetContainer={false}\n\t\t\t\twidth={\"30%\"}\n\t\t\t\tdestroyOnClose\n\t\t\t\tclassName=\"add-server\"\n\t\t\t>\n\t\t\t\t<Radio.Group value={this.state.type} onChange={value => this.setState({ type: value.target.value })}>\n\t\t\t\t\t<Radio.Button value=\"normal\">Default</Radio.Button>\n\t\t\t\t\t<Radio.Button value=\"cluster\">Cluster</Radio.Button>\n\t\t\t\t</Radio.Group>\n\t\t\t\t<div className=\"normal-form\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\taddonBefore=\"Name\"\n\t\t\t\t\t\tplaceholder=\"127.0.0.1\"\n\t\t\t\t\t\tonChange={value => (this.name = value.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t{this.state.type === \"normal\" ? (\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\t\taddonBefore=\"Host\"\n\t\t\t\t\t\t\tplaceholder=\"127.0.0.1\"\n\t\t\t\t\t\t\tonChange={value => (this.host = value.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div className=\"add-input-box\">\n\t\t\t\t\t\t\t<div className=\"add\">\n\t\t\t\t\t\t\t\t<Button type=\"dashed\" onClick={() => this.addHost()}>\n\t\t\t\t\t\t\t\t\tHOST\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"input\">{this.state.clusterHostInput}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{this.state.type === \"normal\" ? (\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\t\taddonBefore=\"Port\"\n\t\t\t\t\t\t\tplaceholder=\"6379\"\n\t\t\t\t\t\t\tonChange={value => (this.port = value.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\t\taddonBefore=\"Master\"\n\t\t\t\t\t\t\tplaceholder=\"master\"\n\t\t\t\t\t\t\tonChange={value => (this.master = value.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t<Input\n\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\taddonBefore=\"Pass\"\n\t\t\t\t\t\tplaceholder=\"password\"\n\t\t\t\t\t\tonChange={value => (this.password = value.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"button-box\">\n\t\t\t\t\t\t<Button type=\"primary\" onClick={() => this.submit()}>\n\t\t\t\t\t\t\t创建\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"primary\" onClick={() => this.test()}>\n\t\t\t\t\t\t\t测试\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Drawer>\n\t\t);\n\t}\n\n\tcreateCluster() {\n\t\tlet cluster = this.cluster.map((v, i) => (\n\t\t\t<Input\n\t\t\t\tspellCheck={false}\n\t\t\t\tkey={i}\n\t\t\t\taddonAfter={<MinusCircleOutlined onClick={() => this.removeHost(i)} />}\n\t\t\t\tclassName=\"package-input\"\n\t\t\t\tplaceholder=\"127.0.0.1:16379\"\n\t\t\t\tonChange={value => {\n\t\t\t\t\tthis.cluster[i] = value.target.value;\n\t\t\t\t}}\n\t\t\t/>\n\t\t));\n\t\treturn cluster;\n\t}\n\n\tremoveHost(i: number): void {\n\t\tthis.cluster.splice(i, 1);\n\t\tthis.setState({ clusterHostInput: this.createCluster() });\n\t}\n\n\taddHost(): void {\n\t\tthis.cluster.push(\"\");\n\t\tthis.setState({ clusterHostInput: this.createCluster() });\n\t}\n\n\tasync test() {\n\t\tlet data = {\n\t\t\tname: this.name,\n\t\t\thost: this.host,\n\t\t\tport: this.port,\n\t\t\tpassword: this.password,\n\t\t\tmaster: this.master,\n\t\t\tcluster: this.cluster.filter(v => v !== \"\")\n\t\t};\n\n\t\tconsole.log(data);\n\n\t\tlet response = await Command.register(this.state.type, data);\n\n\t\treturn Tools.Notification(response, \"连接成功\");\n\t}\n\n\tasync submit() {\n\t\tvar data = {\n\t\t\tname: this.name,\n\t\t\thost: this.host,\n\t\t\tport: this.port,\n\t\t\tpassword: this.password,\n\t\t\tmaster: this.master,\n\t\t\tcluster: this.cluster.filter(v => v !== \"\")\n\t\t};\n\n\t\tif (this.name === \"\") return notification.error({ message: `服务器名不能为空!` });\n\n\t\tlet cfg = Config.get(this.name);\n\t\tif (cfg) return notification.error({ message: \"ERROR\", description: `${this.name} 已经存在!` });\n\n\t\tConfig.set(this.name, data);\n\n\t\tthis.onClose();\n\n\t\tEvent.emit(\"addServer\", this.name);\n\n\t\treturn notification.success({ message: \"SUCCESS\", description: \"创建成功\" });\n\t}\n}\n","import React, { Component } from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport \"./keyTree.scss\";\nimport { Select, Button, message } from \"antd\";\nimport Tools from \"../../tools/Tools\";\nimport Event from \"../../event/Event\";\nimport Config from \"../config/Config\";\nimport WebSocket from \"../../ws/WebSocket\";\nimport { Treebeard } from \"react-treebeard\";\nimport Command from \"../../services/Command\";\n\nconst Option = Select.Option;\n\nexport default class KeyTree extends Component {\n\tstate = {\n\t\tselect: null,\n\t\ttitle: null,\n\t\tdataTree: []\n\t};\n\n\tdataTree: any = [];\n\tserverName = \"\";\n\tdatabases = \"\";\n\tdb = \"请选择DB\";\n\ttype = \"\";\n\n\tcomponentDidMount() {\n\t\tEvent.add(\"connect\", (type, serverName) => this.connect(type, serverName));\n\t\tEvent.add(\"disconnect\", serverName => this.disconnect(serverName));\n\t\tEvent.add(\"update\", serverName => this.update(serverName));\n\t\tEvent.add(\"delete\", serverName => this.delete(serverName));\n\t\tEvent.add(\"deleteKey\", key => this.deleteKey(key));\n\t\tEvent.add(\"insertKey\", key => this.insertKey(key));\n\n\t\tWebSocket.listen(\"scan\", (e: any, v: any) => {\n\t\t\tfor (let index = 0; index < v.length; index++) {\n\t\t\t\tthis.addDataTree(v[index]);\n\t\t\t}\n\t\t\tthis.setState({ dataTree: this.createDataTree() });\n\t\t});\n\n\t\tthis.connect(\"normal\", \"127.0.0.1\");\n\t\tthis.selectDB(0);\n\t}\n\n\tinsertKey(key: any): void {\n\t\tthis.addDataTree(key);\n\t\tthis.setState({ dataTree: this.createDataTree() });\n\t}\n\n\tdeleteKey(key: any): void {\n\t\tlet fn = async () => {\n\t\t\tlet params = key.split(\":\");\n\t\t\tlet temp = this.dataTree;\n\t\t\tfor (let index = 0; index < params.length; index++) {\n\t\t\t\tlet arr = this.inArr(params[index], temp);\n\t\t\t\tif (arr !== false) {\n\t\t\t\t\tif (index === params.length - 1) {\n\t\t\t\t\t\ttemp.splice(arr.index, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\ttemp = arr.value.children;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.setState({ dataTree: this.createDataTree() });\n\t\t};\n\t}\n\n\tqueue = [];\n\trenderQueue() {}\n\n\tcomponentWillUnmount() {\n\t\tEvent.remove(\"connect\");\n\t\tEvent.remove(\"disconnect\");\n\t\tEvent.remove(\"update\");\n\t\tEvent.remove(\"delete\");\n\t}\n\n\tasync connect(type: string, serverName: any) {\n\t\tthis.setState({ select: null, dataTree: [], title: null });\n\t\tthis.serverName = serverName;\n\t\tthis.dataTree = [];\n\t\tthis.db = \"请选择DB\";\n\t\tthis.type = type;\n\t\tlet res = await this.login();\n\t\tthis.databases = res[1];\n\t\tthis.setState({ select: this.createSelect(serverName), title: this.createTitle(serverName, type) });\n\t}\n\n\tdisconnect(serverName: any) {\n\t\tif (this.serverName === serverName) {\n\t\t\tthis.setState({ select: null, dataTree: [], title: null });\n\t\t}\n\t}\n\n\tupdate(serverName: any) {\n\t\tEvent.emit(\"openUpdateServer\", serverName);\n\t}\n\n\tdelete(serverName: any) {\n\t\tif (this.serverName === serverName) {\n\t\t\tthis.setState({ select: null, dataTree: [], title: null });\n\t\t}\n\t}\n\n\tinArr(i: string, arr: any) {\n\t\tfor (let index = 0; index < arr.length; index++) {\n\t\t\tif (arr[index][\"i\"] === i) {\n\t\t\t\treturn { index: index, value: arr[index] };\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\taddDataTree(key: string) {\n\t\tlet params = key.split(\":\");\n\t\tlet temp = this.dataTree;\n\t\tfor (let index = 0; index < params.length; index++) {\n\t\t\tlet arr = this.inArr(params[index], temp);\n\t\t\tif (arr !== false) {\n\t\t\t\tif (index !== params.length - 1) {\n\t\t\t\t\ttemp = arr.value.children;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet item = {\n\t\t\t\tid: Math.random().toString(16),\n\t\t\t\tname: index === params.length - 1 ? key : params[index],\n\t\t\t\ti: params[index],\n\t\t\t\tchildren: []\n\t\t\t};\n\n\t\t\tif (index === params.length - 1) delete item.children;\n\n\t\t\ttemp.push(item);\n\t\t\ttemp = item.children;\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Rnd\n\t\t\t\tdefault={{ height: \"100%\", width: \"20%\", x: 0, y: 0 }}\n\t\t\t\tminWidth={\"20%\"}\n\t\t\t\tmaxWidth={\"40%\"}\n\t\t\t\tbounds=\".content\"\n\t\t\t\tenableResizing={{ right: true }}\n\t\t\t\tdisableDragging={true}\n\t\t\t\tclassName=\"key-tree\"\n\t\t\t>\n\t\t\t\t<div className=\"select-panel\">{this.state.select}</div>\n\t\t\t\t<div className=\"data-tree\">{this.state.dataTree}</div>\n\t\t\t\t<div className=\"title\">{this.state.title}</div>\n\t\t\t</Rnd>\n\t\t);\n\t}\n\n\tcreateTitle(serverName: string, type: string) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t{serverName}({this.type})\n\t\t\t\t</div>\n\t\t\t\t<Button type=\"link\" danger onClick={() => this.refresh()}>\n\t\t\t\t\t刷新\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t);\n\t}\n\trefresh(): void {\n\t\t// let db = this.db;\n\t\t// this.connect(this.type, this.serverName);\n\t\t// if (db !== \"\")\n\t\t// this.dataTree = [];\n\t\tthis.selectDB(this.db);\n\t}\n\n\tcreateSelect(key: any) {\n\t\treturn (\n\t\t\t<Select value={this.db} style={{ width: \"100%\" }} listHeight={600} onSelect={value => this.selectDB(value)}>\n\t\t\t\t{Tools.Range(0, parseInt(this.databases)).map(v => (\n\t\t\t\t\t<Option key={v} value={v}>\n\t\t\t\t\t\tdb({v})\n\t\t\t\t\t</Option>\n\t\t\t\t))}\n\t\t\t</Select>\n\t\t);\n\t}\n\n\tstyle: any = {\n\t\ttree: {\n\t\t\tbase: {\n\t\t\t\tfontSize: \"12px\",\n\t\t\t\twhiteSpace: \"pre-wrap\",\n\t\t\t\tbackgroundColor: \"#ffffff\",\n\t\t\t\theight: \"100%\",\n\t\t\t\tpadding: \"5px\"\n\t\t\t},\n\t\t\tnode: { base: { color: \"red\" }, activeLink: { backgroundColor: \"#bae7ff\" } }\n\t\t}\n\t};\n\n\tcreateDataTree() {\n\t\treturn (\n\t\t\t<Treebeard\n\t\t\t\tdata={this.dataTree}\n\t\t\t\tonToggle={(node, toggled) => this.onToggle(node, toggled)}\n\t\t\t\tstyle={this.style}\n\t\t\t\tanimations={false}\n\t\t\t/>\n\t\t);\n\t}\n\n\tprev: any;\n\n\tonToggle(node: import(\"react-treebeard\").TreeNode, toggled: boolean): void {\n\t\tif (this.prev) {\n\t\t\tthis.prev.active = false;\n\t\t}\n\n\t\tthis.prev = node;\n\n\t\tnode.active = true;\n\n\t\tif (node.children) {\n\t\t\tnode.toggled = toggled;\n\t\t} else {\n\t\t\tthis.onSelect(node.name);\n\t\t}\n\n\t\tthis.setState(() => ({ dataTree: this.createDataTree() }));\n\t}\n\n\tasync onSelect(key: string) {\n\t\tlet type = await Command.type(this.serverName, key);\n\t\tEvent.emit(\"selectKey\", this.serverName, type, key);\n\t}\n\n\tasync login() {\n\t\tmessage.loading({ content: `正在连接 ${this.serverName} ...`, duration: 0 });\n\t\tlet cfg = Config.get(this.serverName);\n\t\tlet response = await Command.register(this.type, cfg);\n\t\tTools.Notification(response, \"连接成功\");\n\t\tmessage.destroy();\n\t\treturn response.data.msg;\n\t}\n\n\tasync selectDB(db: any) {\n\t\tthis.db = db;\n\t\tthis.setState({ select: this.createSelect(this.serverName) });\n\t\tlet response = await Command.selectDB(this.serverName, db);\n\t\tif (response.data.code !== 200) return Tools.Notification(response);\n\t\tawait Command.scan(this.serverName);\n\t}\n}\n","import { notification } from \"antd\";\nimport Tools from \"../tools/Tools\";\nimport Command from \"../services/Command\";\n\nclass Cmd {\n\tCmd(...args: any[]) {}\n}\n\nclass Transform {\n\tcheck(type: string): any {\n\t\tswitch (type) {\n\t\t\tcase \"string\":\n\t\t\t\treturn new String();\n\t\t\tcase \"list\":\n\t\t\t\treturn new List();\n\t\t\tcase \"hash\":\n\t\t\t\treturn new Hash();\n\t\t\tcase \"set\":\n\t\t\t\treturn new Set();\n\t\t\tcase \"zset\":\n\t\t\t\treturn new ZSet();\n\t\t\tdefault:\n\t\t\t\tnotification.error({ message: `Unsupported type ${type}` });\n\t\t\t\treturn new Empty();\n\t\t}\n\t}\n\n\tselect(serverName: string, type: string, key: string) {\n\t\treturn this.do(serverName, key, this.check(type).select(key));\n\t}\n\n\tupdate(serverName: string, type: string, key: string, value: string) {\n\t\treturn this.do(serverName, key, this.check(type).update(key, value));\n\t}\n\n\tinsert(serverName: string, type: string, key: string, value: string) {\n\t\treturn this.do(serverName, key, this.check(type).insert(key, value));\n\t}\n\n\tdelete(serverName: string, type: string, key: string) {\n\t\treturn this.do(serverName, key, this.check(type).delete(key));\n\t}\n\n\tttl(key: string) {\n\t\treturn `TTL ${key}`;\n\t}\n\n\texpire(key: string, seconds: number) {\n\t\treturn `EXPIRE ${key} ${seconds}`;\n\t}\n\n\tasync do(serverName: string, key: string, cmd: string) {\n\t\treturn await Command.do(serverName, key, cmd);\n\t}\n}\n\nclass String {\n\tselect(key: string) {\n\t\treturn `GET ${key}`;\n\t}\n\tupdate(key: string, value: string) {\n\t\treturn `SET ${key} ${value}`;\n\t}\n\tinsert(key: string, value: string) {\n\t\treturn `SET ${key} ${value}`;\n\t}\n\tdelete(key: string) {\n\t\treturn `DEL ${key}`;\n\t}\n}\nclass List {\n\tselect() {}\n}\nclass Hash {\n\tselect() {}\n}\nclass Set {\n\tselect() {}\n}\nclass ZSet {\n\tselect() {}\n}\nclass Empty {\n\tselect() {}\n}\n\nexport default new Transform();\n","import React, { Component } from \"react\";\nimport Event from \"../../../event/Event\";\nimport Transform from \"../../../transform/Transform\";\nimport \"./string.scss\";\nimport { Input, Button, Select, Modal } from \"antd\";\nconst { TextArea } = Input;\n\nconst Option = Select.Option;\n\nexport default class String extends Component {\n\tcomponentDidMount() {\n\t\tEvent.add(\"string\", (serverName: string, type: string, key: string) => this.select(serverName, type, key));\n\t}\n\n\tcomponentWillUnmount() {\n\t\tEvent.remove(\"string\");\n\t}\n\n\tstate = { key: \"\", value: \"\", rename: false };\n\n\tserverName = \"\";\n\ttype = \"\";\n\tvalue = \"\";\n\tkey = \"\";\n\n\tasync select(serverName: string, type: string, key: string) {\n\t\tthis.serverName = serverName;\n\t\tthis.type = type;\n\t\tthis.key = key;\n\t\tlet value = await Transform.select(serverName, type, key);\n\t\tthis.value = value;\n\t\tthis.setState({ key: key, value });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"string\">\n\t\t\t\t<Modal\n\t\t\t\t\tvisible={this.state.rename}\n\t\t\t\t\tmaskClosable={false}\n\t\t\t\t\tclosable={false}\n\t\t\t\t\tonOk={() => this.rename()}\n\t\t\t\t\tonCancel={() => this.closeRename()}\n\t\t\t\t\twidth={300}\n\t\t\t\t\tokText=\"确定\"\n\t\t\t\t\tcancelText=\"取消\"\n\t\t\t\t>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\tdefaultValue={this.state.key}\n\t\t\t\t\t\tonChange={value => this.setState({ key: value.target.value })}\n\t\t\t\t\t></Input>\n\t\t\t\t</Modal>\n\t\t\t\t<div className=\"top\">\n\t\t\t\t\t<div className=\"top\">\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\taddonBefore={this.type.toUpperCase()}\n\t\t\t\t\t\t\taddonAfter={\"TTL:-1\"}\n\t\t\t\t\t\t\tvalue={this.state.key}\n\t\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button type=\"default\" onClick={() => this.openRename()}>\n\t\t\t\t\t\t\t重命名\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"primary\" onClick={() => this.select(this.serverName, this.type, this.state.key)}>\n\t\t\t\t\t\t\t刷新\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"dashed\" danger>\n\t\t\t\t\t\t\t删除\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bottom\">\n\t\t\t\t\t\t<Select defaultValue=\"显示格式\" style={{ width: 100 }}>\n\t\t\t\t\t\t\t<Option key=\"plain/text\" value=\"plain/text\">\n\t\t\t\t\t\t\t\tplain/text\n\t\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t\t<Option key=\"json\" value=\"plain/text\">\n\t\t\t\t\t\t\t\tjson\n\t\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<TextArea\n\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\tvalue={this.state.value}\n\t\t\t\t\t\tonChange={value => this.onChange(value.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"bottom\">\n\t\t\t\t\t<div className=\"top\">\n\t\t\t\t\t\t<Button type=\"primary\">保存</Button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bottom\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tasync insert(serverName: string, type: string, key: string, value: string) {\n\t\tawait Transform.insert(serverName, type, key, value);\n\t\tEvent.emit(\"insertKey\", key);\n\t}\n\n\tasync delete(serverName: string, type: string, key: string) {\n\t\tawait Transform.delete(serverName, type, key);\n\t\tEvent.emit(\"deleteKey\", key);\n\t}\n\n\tasync rename() {\n\t\tawait this.insert(this.serverName, this.type, this.state.key, this.value);\n\t\tconsole.log(\"new\", this.state.key);\n\t\tawait this.delete(this.serverName, this.type, this.key);\n\t\tconsole.log(\"old\", this.key);\n\t\tthis.key = this.state.key;\n\t\tthis.closeRename();\n\t}\n\n\tcloseRename(): void {\n\t\tthis.setState({ rename: false });\n\t}\n\n\topenRename(): void {\n\t\tthis.setState({ rename: true });\n\t}\n\n\tonChange(value: string): void {\n\t\tthis.setState({ value: value });\n\t}\n}\n","import React, { Component } from \"react\";\nimport Event from \"../../../event/Event\";\nimport Transform from \"../../../transform/Transform\";\n\nexport default class List extends Component {\n\trender() {\n\t\treturn <div>list</div>;\n\t}\n}\n","import React, { Component } from \"react\";\nimport \"./panel.scss\";\nimport WebSocket from \"../../ws/WebSocket\";\nimport Event from \"../../event/Event\";\nimport Transform from \"../../transform/Transform\";\nimport String from \"./data/String\";\nimport List from \"./data/List\";\n\nexport default class Panel extends Component {\n\tstate = { component: \"\" };\n\n\tcomponentDidMount() {\n\t\tEvent.add(\"selectKey\", (serverName: string, type: string, key: string) => {\n\t\t\tlet component = null;\n\n\t\t\tswitch (type) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tcomponent = <String></String>;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"list\":\n\t\t\t\t\tcomponent = <List></List>;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"hash\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"zset\":\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"set\":\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.setState({ component: component }, () => {\n\t\t\t\tEvent.emit(type, serverName, type, key);\n\t\t\t});\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tEvent.remove(\"selectKey\");\n\t}\n\n\trender() {\n\t\treturn <div className=\"panel\">{this.state.component}</div>;\n\t}\n}\n","import React, { Component } from \"react\";\nimport { Drawer, Button, Modal } from \"antd\";\nimport Event from \"../../event/Event\";\nimport \"./serverList.scss\";\nimport Config from \"../config/Config\";\n\nexport default class ServerList extends Component {\n\tstate = { visible: false, modal: false, header: this.createHeader() };\n\n\tonClose() {\n\t\tthis.setState({ visible: false });\n\t}\n\n\tonOpen() {\n\t\tthis.setState({ visible: true });\n\t}\n\n\tcomponentDidMount() {\n\t\tEvent.add(\"openServerList\", () => this.onOpen());\n\t\tEvent.add(\"addServer\", () => this.setState({ header: this.createHeader() }));\n\t\tEvent.add(\"updateServer\", () => this.setState({ header: this.createHeader() }));\n\t}\n\n\tcomponentWillUnmount() {\n\t\tEvent.remove(\"openServerList\");\n\t}\n\n\tcreateHeader() {\n\t\tlet data = [];\n\t\tlet config = Config.all();\n\t\tfor (const serverName in config) {\n\t\t\tdata.push(\n\t\t\t\t<div className=\"db-header\" key={serverName}>\n\t\t\t\t\t<div>{serverName}</div>\n\t\t\t\t\t<div className=\"button\">\n\t\t\t\t\t\t<Button type=\"link\" onClick={() => this.connect(serverName)}>\n\t\t\t\t\t\t\t连接\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"link\" onClick={() => this.update(serverName)}>\n\t\t\t\t\t\t\t修改\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"link\" danger onClick={() => this.disconnect(serverName)}>\n\t\t\t\t\t\t\t断开\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"link\" danger onClick={() => this.delete(serverName)}>\n\t\t\t\t\t\t\t删除\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn data;\n\t}\n\n\tupdate(serverName: string) {\n\t\tEvent.emit(\"update\", serverName);\n\t}\n\n\tserverName = \"\";\n\tconnect(serverName: string) {\n\t\tthis.serverName = serverName;\n\t\tthis.onChooseOpen();\n\t}\n\n\tdisconnect(serverName: string) {\n\t\tthis.onClose();\n\t\tEvent.emit(\"disconnect\", serverName);\n\t}\n\n\tdelete(serverName: string) {\n\t\tModal.confirm({\n\t\t\ttitle: `确定要删除 ${serverName} 的配置吗`,\n\t\t\tokText: \"确认\",\n\t\t\tcancelText: \"取消\",\n\t\t\tonOk: () => {\n\t\t\t\tConfig.delete(serverName);\n\t\t\t\tthis.setState({ header: this.createHeader() });\n\t\t\t\tEvent.emit(\"delete\", serverName);\n\t\t\t}\n\t\t});\n\t}\n\n\tonChooseClose() {\n\t\tthis.setState({ modal: false });\n\t}\n\n\tonChooseOpen() {\n\t\tthis.setState({ modal: true });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Drawer\n\t\t\t\ttitle=\"服务器列表\"\n\t\t\t\tplacement=\"right\"\n\t\t\t\tclosable={false}\n\t\t\t\tonClose={() => this.onClose()}\n\t\t\t\tvisible={this.state.visible}\n\t\t\t\tgetContainer={false}\n\t\t\t\twidth={\"30%\"}\n\t\t\t\tclassName=\"server-list\"\n\t\t\t\tdestroyOnClose\n\t\t\t>\n\t\t\t\t{this.state.header}\n\t\t\t\t<Modal\n\t\t\t\t\tdestroyOnClose\n\t\t\t\t\ttitle={`选择连接方式`}\n\t\t\t\t\tvisible={this.state.modal}\n\t\t\t\t\tclassName=\"choose-server\"\n\t\t\t\t\tonCancel={() => this.onChooseClose()}\n\t\t\t\t\tclosable={true}\n\t\t\t\t\tmaskClosable={true}\n\t\t\t\t\tfooter={null}\n\t\t\t\t>\n\t\t\t\t\t<Button type=\"dashed\" onClick={() => this.choose(\"normal\")}>\n\t\t\t\t\t\tNormal\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button type=\"dashed\" onClick={() => this.choose(\"cluster\")}>\n\t\t\t\t\t\tCluster\n\t\t\t\t\t</Button>\n\t\t\t\t</Modal>\n\t\t\t</Drawer>\n\t\t);\n\t}\n\n\tchoose(type: string): void {\n\t\tEvent.emit(\"connect\", type, this.serverName);\n\t\tthis.onChooseClose();\n\t\tthis.onClose();\n\t}\n}\n","import React, { Component } from \"react\";\nimport Modal from \"antd/lib/modal/Modal\";\nimport Event from \"../../event/Event\";\nimport { Radio, Input, Button, notification, message } from \"antd\";\nimport Config from \"../config/Config\";\nimport { config } from \"../../interface/config\";\nimport \"./updateServer.scss\";\nimport Command from \"../../services/Command\";\nimport { MinusCircleOutlined } from \"@ant-design/icons\";\nimport Tools from \"../../tools/Tools\";\n\nexport default class UpdateServer extends Component {\n\tstate = { visible: false, config: {} as config, type: \"normal\", clusterHostInput: null };\n\n\tonOpen() {\n\t\tthis.setState({ visible: true });\n\t}\n\n\tonClose() {\n\t\tthis.setState({ visible: false, clusterHostInput: null });\n\t}\n\n\tserverName = \"\";\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t}\n\n\tcomponentDidMount() {\n\t\tEvent.add(\"openUpdateServer\", serverName => {\n\t\t\tthis.serverName = serverName;\n\t\t\tlet config = Config.get(serverName);\n\t\t\tif (!config.cluster) config.cluster = [];\n\t\t\tthis.setState({ config: config }, () => this.setState({ clusterHostInput: this.createCluster() }));\n\t\t\tthis.onOpen();\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tEvent.remove(\"openUpdateServer\");\n\t}\n\n\tonChange(type: string, value: string) {\n\t\t(this.state.config as any)[type] = value;\n\t\tthis.setState({ config: this.state.config, clusterHostInput: this.createCluster() });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Modal\n\t\t\t\tdestroyOnClose\n\t\t\t\ttitle={`修改 ${this.state.config.name} 配置`}\n\t\t\t\tvisible={this.state.visible}\n\t\t\t\tclassName=\"update-server\"\n\t\t\t\tclosable={false}\n\t\t\t\tmaskClosable={false}\n\t\t\t\tfooter={null}\n\t\t\t>\n\t\t\t\t<Radio.Group value={this.state.type} onChange={value => this.setState({ type: value.target.value })}>\n\t\t\t\t\t<Radio.Button value=\"normal\">Default</Radio.Button>\n\t\t\t\t\t<Radio.Button value=\"cluster\">Cluster</Radio.Button>\n\t\t\t\t</Radio.Group>\n\t\t\t\t<div className=\"normal-form\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\taddonBefore=\"Name\"\n\t\t\t\t\t\tplaceholder=\"127.0.0.1\"\n\t\t\t\t\t\tvalue={this.state.config.name}\n\t\t\t\t\t\tonChange={value => this.onChange(\"name\", value.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t{this.state.type === \"normal\" ? (\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\t\taddonBefore=\"Host\"\n\t\t\t\t\t\t\tplaceholder=\"127.0.0.1\"\n\t\t\t\t\t\t\tvalue={this.state.config.host}\n\t\t\t\t\t\t\tonChange={value => this.onChange(\"host\", value.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div className=\"add-input-box\">\n\t\t\t\t\t\t\t<div className=\"add\">\n\t\t\t\t\t\t\t\t<Button type=\"dashed\" onClick={() => this.addHost()}>\n\t\t\t\t\t\t\t\t\tHOST\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"input\">{this.state.clusterHostInput}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{this.state.type === \"normal\" ? (\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\t\taddonBefore=\"Port\"\n\t\t\t\t\t\t\tplaceholder=\"6379\"\n\t\t\t\t\t\t\tvalue={this.state.config.port}\n\t\t\t\t\t\t\tonChange={value => this.onChange(\"port\", value.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\t\taddonBefore=\"Master\"\n\t\t\t\t\t\t\tplaceholder=\"master\"\n\t\t\t\t\t\t\tvalue={this.state.config.master}\n\t\t\t\t\t\t\tonChange={value => this.onChange(\"master\", value.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t<Input\n\t\t\t\t\t\tspellCheck={false}\n\t\t\t\t\t\taddonBefore=\"Pass\"\n\t\t\t\t\t\tplaceholder=\"password\"\n\t\t\t\t\t\tvalue={this.state.config.password}\n\t\t\t\t\t\tonChange={value => this.onChange(\"password\", value.target.value)}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<div className=\"button-box\">\n\t\t\t\t\t\t<Button type=\"primary\" onClick={() => this.submit()}>\n\t\t\t\t\t\t\t修改\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"primary\" onClick={() => this.test()}>\n\t\t\t\t\t\t\t测试\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button type=\"default\" onClick={() => this.onClose()}>\n\t\t\t\t\t\t\t取消\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Modal>\n\t\t);\n\t}\n\n\tcreateCluster() {\n\t\tlet cluster = this.state.config.cluster.map((v, i) => (\n\t\t\t<Input\n\t\t\t\tspellCheck={false}\n\t\t\t\tkey={i}\n\t\t\t\taddonAfter={<MinusCircleOutlined onClick={() => this.removeHost(i)} />}\n\t\t\t\tclassName=\"package-input\"\n\t\t\t\tplaceholder=\"127.0.0.1:16379\"\n\t\t\t\tvalue={this.state.config.cluster[i]}\n\t\t\t\tonChange={value => {\n\t\t\t\t\tthis.state.config.cluster[i] = value.target.value;\n\t\t\t\t\tthis.setState({ config: this.state.config, clusterHostInput: this.createCluster() });\n\t\t\t\t}}\n\t\t\t/>\n\t\t));\n\t\treturn cluster;\n\t}\n\n\tremoveHost(i: number): void {\n\t\tthis.state.config.cluster.splice(i, 1);\n\t\tthis.setState({ clusterHostInput: this.createCluster() });\n\t}\n\n\taddHost(): void {\n\t\tthis.state.config.cluster.push(\"\");\n\t\tthis.setState({ clusterHostInput: this.createCluster() });\n\t}\n\n\tasync test() {\n\t\tthis.state.config.cluster = this.state.config.cluster.filter(v => v !== \"\");\n\t\tmessage.loading({ content: `正在连接 ${this.state.config.name} ...`, duration: 0 });\n\t\tlet response = await Command.register(this.state.type, this.state.config);\n\t\tmessage.destroy();\n\t\treturn Tools.Notification(response, \"连接成功\");\n\t}\n\n\tsubmit() {\n\t\tConfig.delete(this.serverName);\n\t\tthis.state.config.cluster = this.state.config.cluster.filter(v => v !== \"\");\n\t\tConfig.set(this.state.config.name, this.state.config);\n\t\tmessage.success(\"修改成功\");\n\t\tthis.onClose();\n\t\tEvent.emit(\"updateServer\");\n\t}\n}\n","import React, { Component } from \"react\";\nimport \"./index.scss\";\nimport Header from \"../../components/header/Header\";\nimport AddServer from \"../../components/addServer/AddServer\";\nimport KeyTree from \"../../components/keyTree/KeyTree\";\nimport Panel from \"../../components/panel/Panel\";\nimport ServerList from \"../../components/serverList/ServerList\";\nimport UpdateServer from \"../../components/updateServer/UpdateServer\";\n\nclass Index extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"index\">\n\t\t\t\t<AddServer></AddServer>\n\t\t\t\t<ServerList></ServerList>\n\t\t\t\t<UpdateServer></UpdateServer>\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<Header></Header>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<KeyTree></KeyTree>\n\t\t\t\t\t<Panel></Panel>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Index;\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport \"./login.scss\";\n\nfunction Login() {\n\treturn (\n\t\t<div className=\"login\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<Button type=\"default\">Button</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport { createBrowserHistory, History, UnregisterCallback, Location } from \"history\";\nimport \"./App.scss\";\nimport Index from \"./pages/index/Index\";\nimport Login from \"./pages/login/Login\";\nimport WebSocket from \"./ws/WebSocket\";\n\nexport default class App extends Component {\n\tunlisten!: UnregisterCallback;\n\n\tchange(location: Location<History.PoorMansUnknown>) {\n\t\tif (false) return (window.location.hash = \"/login\");\n\t\tif (location.hash === \"#/login\") return (window.location.hash = \"/index\");\n\t}\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tWebSocket.start();\n\t}\n\n\tcomponentDidMount() {\n\t\tconst history = createBrowserHistory();\n\t\t// Get the current location.\n\t\tconst location = history.location;\n\n\t\tthis.change(location);\n\n\t\t// Listen for changes to the current location.\n\t\tthis.unlisten = history.listen((location, action) => {\n\t\t\t// location is an object like window.location\n\t\t\tthis.change(location);\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tWebSocket.close();\n\t\tthis.unlisten();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<HashRouter>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/index\" component={Index} />\n\t\t\t\t\t<Route path=\"/login\" component={Login} exact />\n\t\t\t\t\t<Redirect from=\"**\" to=\"/index\" />\n\t\t\t\t</Switch>\n\t\t\t</HashRouter>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Axios from \"axios\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { message, notification } from \"antd\";\n\nAxios.defaults.headers.post[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n\nAxios.defaults.baseURL = \"http://127.0.0.1:12388\";\n\nAxios.defaults.timeout = 5000;\n\nAxios.interceptors.response.use(\n\tresponse => {\n\t\treturn response;\n\t},\n\terror => {\n\t\treturn error;\n\t}\n);\n\nmessage.config({ maxCount: 3 });\n\nnotification.config({ duration: 2, placement: \"bottomRight\" });\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}