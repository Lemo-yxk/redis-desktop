{"version":3,"sources":["app/event/Event.ts","app/components/header/Header.tsx","app/components/addServer/AddServer.tsx","app/ws/WebSocket.ts","app/pages/index/Index.tsx","app/pages/login/Login.tsx","app/pages/command/Command.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["events","name","e","this","args","Header","className","type","onClick","addServer","ghost","danger","Event","emit","Component","AddServer","state","visible","event","setState","add","onOpen","remove","title","placement","closable","onClose","getContainer","width","ws","isStart","Socket","config","host","port","console","log","onError","err","start","close","Index","date","WebSocket","addListener","data","msg","default","height","x","y","minWidth","maxWidth","bounds","enableResizing","right","disableDragging","Login","Command","App","props","unlisten","location","hash","window","history","createBrowserHistory","change","listen","action","path","component","exact","from","to","Boolean","hostname","match","Axios","defaults","headers","post","baseURL","timeout","interceptors","response","use","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.214c1564.chunk.js","sourcesContent":["class Event {\n\tevents: { [key: string]: (args?: any[]) => void } = {};\n\n\tadd(name: string, e: (args?: any[]) => void): string {\n\t\tthis.events[name] = e;\n\t\treturn name;\n\t}\n\n\tremove(name: string) {\n\t\tdelete this.events[name];\n\t}\n\n\temit(name: string, args?: any[]) {\n\t\tthis.events[name](args);\n\t}\n}\n\nexport default new Event();\n","import React, { Component } from \"react\";\nimport { Button } from \"antd\";\nimport \"./header.scss\";\nimport Event from \"../../event/Event\";\n\nexport default class Header extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"header\">\n\t\t\t\t<div className=\"left\">\n\t\t\t\t\t<Button type=\"primary\" onClick={() => this.addServer()}>\n\t\t\t\t\t\t添加\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button ghost>Default</Button>\n\t\t\t\t\t<Button ghost>Default</Button>\n\t\t\t\t\t<Button ghost>Default</Button>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"right\">\n\t\t\t\t\t<Button type=\"primary\" ghost>\n\t\t\t\t\t\tPrimary\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button ghost>Default</Button>\n\t\t\t\t\t<Button type=\"dashed\" ghost>\n\t\t\t\t\t\tlink\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button type=\"dashed\" danger ghost>\n\t\t\t\t\t\tlink\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\taddServer(): void {\n\t\tEvent.emit(\"addServer\");\n\t}\n}\n","import React, { Component } from \"react\";\nimport { Drawer } from \"antd\";\nimport Event from \"../../event/Event\";\n\nexport default class AddServer extends Component {\n\tstate = { visible: false };\n\tevent!: string;\n\n\tonClose() {\n\t\tthis.setState({ visible: false });\n\t}\n\n\tonOpen() {\n\t\tthis.setState({ visible: true });\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.event = Event.add(\"addServer\", () => {\n\t\t\tthis.onOpen();\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tEvent.remove(this.event);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Drawer\n\t\t\t\ttitle=\"Basic Drawer\"\n\t\t\t\tplacement=\"right\"\n\t\t\t\tclosable={false}\n\t\t\t\tonClose={() => this.onClose()}\n\t\t\t\tvisible={this.state.visible}\n\t\t\t\tgetContainer={false}\n\t\t\t\twidth={\"50%\"}\n\t\t\t>\n\t\t\t\t<p>Some contents...</p>\n\t\t\t\t<p>Some contents...</p>\n\t\t\t\t<p>Some contents...</p>\n\t\t\t</Drawer>\n\t\t);\n\t}\n}\n","import Socket from \"lows\";\n\nclass WebSocket {\n\tws: Socket;\n\tisStart = false;\n\n\tconstructor() {\n\t\tthis.ws = new Socket();\n\n\t\tthis.ws.config = {\n\t\t\thost: \"http://127.0.0.1\",\n\t\t\tport: \"12389\"\n\t\t};\n\n\t\tthis.ws.onOpen = () => {\n\t\t\tconsole.log(\"on open\");\n\t\t};\n\n\t\tthis.ws.onError = (err: any) => {\n\t\t\tconsole.log(\"on error\", err);\n\t\t};\n\n\t\tthis.ws.onClose = () => {\n\t\t\tconsole.log(\"on close\");\n\t\t};\n\t}\n\n\tstart() {\n\t\t!this.isStart && this.ws.start();\n\t\tthis.isStart = true;\n\t}\n\n\tclose() {\n\t\tthis.isStart && this.ws.close();\n\t\tthis.isStart = false;\n\t}\n}\n\nexport default new WebSocket();\n","import React, { Component } from \"react\";\nimport { Rnd, ResizeEnable } from \"react-rnd\";\nimport \"./index.scss\";\nimport Header from \"../../components/header/Header\";\nimport AddServer from \"../../components/addServer/AddServer\";\nimport WebSocket from \"../../ws/WebSocket\";\n\nclass Index extends Component {\n\tstate = { date: \"\" };\n\n\tcomponentWillMount() {\n\t\tWebSocket.ws.addListener(\"system-time\", (event: any, data: any) => {\n\t\t\tthis.setState({ date: data.msg });\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"index\">\n\t\t\t\t<AddServer></AddServer>\n\t\t\t\t<Header></Header>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<Rnd\n\t\t\t\t\t\tdefault={{ height: \"100%\", width: \"20%\", x: 0, y: 0 }}\n\t\t\t\t\t\tminWidth={\"20%\"}\n\t\t\t\t\t\tmaxWidth={\"40%\"}\n\t\t\t\t\t\tbounds=\".content\"\n\t\t\t\t\t\tenableResizing={{ right: true }}\n\t\t\t\t\t\tdisableDragging={true}\n\t\t\t\t\t\tclassName=\"left\"\n\t\t\t\t\t>\n\t\t\t\t\t\tleft\n\t\t\t\t\t</Rnd>\n\t\t\t\t\t<div className=\"right\">{this.state.date}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Index;\n","import React from \"react\";\nimport { Button } from \"antd\";\nimport \"./login.scss\";\n\nfunction Login() {\n\treturn (\n\t\t<div className=\"login\">\n\t\t\t<div className=\"content\">\n\t\t\t\t<Button type=\"default\">Button</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Login;\n","import React from \"react\";\n\nfunction Command() {\n\treturn <div>hello command</div>;\n}\n\nexport default Command;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport { createBrowserHistory, History, UnregisterCallback, Location } from \"history\";\nimport \"./App.scss\";\nimport Index from \"./pages/index/Index\";\nimport Login from \"./pages/login/Login\";\nimport Command from \"./pages/command/Command\";\nimport WebSocket from \"./ws/WebSocket\";\n\nexport default class App extends Component {\n\tunlisten!: UnregisterCallback;\n\n\tchange(location: Location<History.PoorMansUnknown>) {\n\t\tif (false) return (window.location.hash = \"/login\");\n\t\tif (location.hash === \"#/login\") return (window.location.hash = \"/index\");\n\t}\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\t\tWebSocket.start();\n\t}\n\n\tcomponentWillMount() {\n\t\tconst history = createBrowserHistory();\n\t\t// Get the current location.\n\t\tconst location = history.location;\n\n\t\tthis.change(location);\n\n\t\t// Listen for changes to the current location.\n\t\tthis.unlisten = history.listen((location, action) => {\n\t\t\t// location is an object like window.location\n\t\t\tthis.change(location);\n\t\t});\n\t}\n\n\tcomponentWillUnmount() {\n\t\tWebSocket.close();\n\t\tthis.unlisten();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<HashRouter>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/index\" component={Index} />\n\t\t\t\t\t<Route path=\"/command\" component={Command} />\n\t\t\t\t\t<Route path=\"/login\" component={Login} exact />\n\t\t\t\t\t<Redirect from=\"**\" to=\"/index\" />\n\t\t\t\t</Switch>\n\t\t\t</HashRouter>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Axios from \"axios\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nAxios.defaults.headers.post[\"Content-Type\"] = \"application/x-www-form-urlencoded\";\n\nAxios.defaults.baseURL = \"http://127.0.0.1:12388\";\n\nAxios.defaults.timeout = 5000;\n\nAxios.interceptors.response.use(response => {\n\treturn response;\n});\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}